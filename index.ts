// import { logger } from "./config/appConfig";
// import { grpcUrl } from "./config/config";
// import { tokenMonitor } from "./src/pumpfun/tokenMonitor";
// import { PumpFunMonitor } from "./src/pumpfun/pumpFunMonitor";
// import { accountsMonitor } from "./src/accounts/accountsMonitor";
// import { tokenBuyMonitor } from "./src/pumpfun/tokenBuysMonitor";


// async function main() {
//   accountsMonitor.monitorTasks();
//   tokenBuyMonitor.monitorTasks();
//   const pumpFunMonitor = new PumpFunMonitor(grpcUrl, tokenMonitor);
//   await pumpFunMonitor.startMonitoring()
// }

// main().catch((error) => {
//   logger.error("Error in main():", error);
//   process.exit(1);
// });
import { Connection, PublicKey, ParsedTransactionWithMeta } from "@solana/web3.js";

// RPC-—É–∑–µ–ª Solana
const RPC_URL = "https://api.mainnet-beta.solana.com"; // –ò—Å–ø–æ–ª—å–∑—É–π mainnet, testnet –∏–ª–∏ devnet
const connection = new Connection(RPC_URL, "confirmed");

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ.
 * @param signature - –°–∏–≥–Ω–∞—Ç—É—Ä–∞ (id) —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
 * @returns –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ `null`, –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
 */
export async function getParsedTransaction(signature: string): Promise<ParsedTransactionWithMeta | null> {
  try {
    const parsedTx = await connection.getParsedTransaction(signature, {
      maxSupportedTransactionVersion: 0, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    });

    if (!parsedTx) {
      console.log("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", signature);
      return null;
    }

    console.log("‚úÖ –†–∞–∑–æ–±—Ä–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:", parsedTx);
    return parsedTx;
  } catch (error) {
    console.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
    return null;
  }
}

// üî• –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ (–∑–∞–º–µ–Ω–∏ SIG –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
const signature = "2jHUbjihhg8LYT3wNWz6cEm4w2fM8FyBcXDHWqXrRGQ6ujLo5jxzViSeDv3Z1frUoqfpncUouYyzaevqqcHyLRsP"; // –£–∫–∞–∂–∏ —Ä–µ–∞–ª—å–Ω—É—é sig —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
getParsedTransaction(signature).then((tx) => {
  if (tx) {
    console.log(tx.transaction.message.accountKeys);
  }
});
